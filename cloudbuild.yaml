steps:
  # Step 1: Build the Docker image using Cloud Buildpacks (No Dockerfile required)
  # - name: 'gcr.io/buildpacks/builder:v1'
    # id: 'Build Application Image'
    # args:
      # - '.'  # Context directory, ensure this points to the root of the repository where pom.xml or build.gradle is located
      
  - name: 'gcr.io/cloud-builders/maven'
    id: 'Build Spring Boot App'
    args:
      - 'clean'
      - 'install'
      - '-DskipTests'

  # Step 2: Push the Docker image to Google Container Registry (GCR)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Docker Image to GCR'
    args:
      - 'push'
      - 'gcr.io/$_GCP_PROJECT_ID/helloworld:$COMMIT_SHA'  # Use the commit SHA as the image tag

  # Step 3: Deploy the Docker image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy to Cloud Run'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'helloworld'  # Name of the Cloud Run service
      - '--image'
      - 'gcr.io/$_GCP_PROJECT_ID/helloworld:$COMMIT_SHA'  # Image to deploy
      - '--platform'
      - 'managed'
      - '--region'
      - 'us-central1'  # Specify your region
      - '--allow-unauthenticated'  # Allow public access (remove if not desired)

# Optional: Define images to push after the build
images:
  - 'gcr.io/$_GCP_PROJECT_ID/helloworld:$COMMIT_SHA'

# Set the timeout for the build process (20 minutes)
timeout: '1200s'

# Logging Configuration
options:
  logging: CLOUD_LOGGING_ONLY  # Send logs to Cloud Logging

# Logging bucket option, if needed
#logs_bucket: 'gs://teak-environs-445405-g2.appspot.com'  # Specify your GCS bucket for logs
